from burp import IBurpExtender
from burp import IContextMenuFactory
from burp import ITab

from javax.swing import JMenuItem
from javax.swing import JPanel
from javax.swing import JLabel
from javax.swing import JScrollPane
from javax.swing import JTextArea
from javax.swing import JTextField
from javax.swing import JButton
from javax.swing import JComboBox
from javax.swing import JFrame
from javax.swing import SwingWorker
from java.awt import BorderLayout
from java.awt.event import ActionListener
import urllib2
import json

class BurpExtender(IBurpExtender, IContextMenuFactory, ITab):
    
    def registerExtenderCallbacks(self, callbacks):
        self.callbacks = callbacks
        self.helpers = callbacks.getHelpers()
        self.callbacks.setExtensionName("Request Vulnerability Analysis With AI Extension")
        
        # Default settings
        self.api_endpoint = "http://127.0.0.1:11434/api/generate"
        self.model = "codegemma"
        self.ai_tool = "Ollama"
        
        # Create a new tab for analysis and settings
        self.panel = JPanel(BorderLayout())
        
        # Message about analyzing requests
        self.label = JLabel("Right-click on a request and select 'Analyze Request for Vulnerabilities' to open a new window.")
        
        # Settings form
        settings_form = self.create_settings_panel()
        
        # Add components to the main panel
        self.panel.add(self.label, BorderLayout.NORTH)
        self.panel.add(settings_form, BorderLayout.CENTER)
        
        # Add the custom tab to Burp's UI
        callbacks.addSuiteTab(self)
        
        # Register the context menu factory
        callbacks.registerContextMenuFactory(self)
    
    def create_settings_panel(self):
        panel = JPanel()
        
        # API Endpoint
        api_label = JLabel("API Endpoint: ")
        self.api_field = JTextField(self.api_endpoint, 50)
        
        # Model
        model_label = JLabel("Model: ")
        self.model_field = JTextField(self.model, 50)

        # AI Tool
        tool_label = JLabel("AI Tool: ")
        self.tool_field = JComboBox(["Ollama", "AnotherTool"])
        self.tool_field.setSelectedItem(self.ai_tool)
        
        # Save Button
        save_button = JButton("Save Settings")
        save_button.addActionListener(SaveSettingsListener(self))
        
        # Layout
        panel.add(api_label)
        panel.add(self.api_field)
        panel.add(model_label)
        panel.add(self.model_field)
        panel.add(tool_label)
        panel.add(self.tool_field)
        panel.add(save_button)
        
        return panel
    
    def createMenuItems(self, invocation):
        # Create a context menu item
        menu_item = JMenuItem("Analyze Request for Vulnerabilities With AI")
        menu_item.addActionListener(CustomMenuItemListener(self, invocation))
        return [menu_item]
    
    def getTabCaption(self):
        return "Request Vulnerability Analysis With AI"
    
    def getUiComponent(self):
        return self.panel
    
    def save_settings(self):
        self.api_endpoint = self.api_field.getText()
        self.model = self.model_field.getText()
        self.ai_tool = self.tool_field.getSelectedItem()

class SaveSettingsListener(ActionListener):
    def __init__(self, extender):
        self.extender = extender

    def actionPerformed(self, event):
        self.extender.save_settings()

class CustomMenuItemListener(ActionListener):
    def __init__(self, extender, invocation):
        self.extender = extender
        self.invocation = invocation

    def actionPerformed(self, event):
        # Get the selected messages
        selected_messages = self.invocation.getSelectedMessages()
        if selected_messages:
            request_info = self.extender.helpers.analyzeRequest(selected_messages[0])
            request_str = self.extender.helpers.bytesToString(selected_messages[0].getRequest())
            
            # Open a new window for the analysis
            AnalysisWindow(self.extender, request_str)

class AnalysisWindow:
    def __init__(self, extender, request_str):
        self.extender = extender
        self.request_str = request_str
        
        # Create a new JFrame
        self.frame = JFrame("Vulnerability Analysis")
        self.frame.setSize(600, 400)
        
        # Create a JPanel with a JTextArea
        self.panel = JPanel(BorderLayout())
        self.text_area = JTextArea(10, 50)
        self.text_area.setLineWrap(True)
        self.text_area.setWrapStyleWord(True)
        self.scroll_pane = JScrollPane(self.text_area)
        self.panel.add(self.scroll_pane, BorderLayout.CENTER)
        
        # Set the progress text
        self.text_area.setText("Analyzing request for vulnerabilities, please wait...")
        
        # Add the panel to the frame and display it
        self.frame.add(self.panel)
        self.frame.setVisible(True)
        
        # Run the analysis in a background thread
        AnalysisWorker(self, request_str, self.extender.api_endpoint, self.extender.model, self.extender.ai_tool).execute()

class AnalysisWorker(SwingWorker):
    def __init__(self, window, request_str, api_endpoint, model, ai_tool):
        self.window = window
        self.request_str = request_str
        self.api_endpoint = api_endpoint
        self.model = model
        self.ai_tool = ai_tool
    
    def doInBackground(self):
        if self.ai_tool == "Ollama":
            return self.analyze_request_with_ollama(self.request_str)
        else:
            return "Selected AI tool is not supported yet."
    
    def done(self):
        try:
            analysis = self.get()
            self.window.text_area.setText("Attack Analysis:\n" + analysis)
        except Exception as e:
            self.window.text_area.setText("Error: " + str(e))
    
    def analyze_request_with_ollama(self, request_str):
        try:
            data = json.dumps({
                "model": self.model,
                "prompt": "Analyze the following HTTP request for potential vulnerabilities:\n\n{}".format(request_str)
            })
            headers = {'Content-Type': 'application/json'}
            
            request = urllib2.Request(self.api_endpoint, data.encode('utf-8'), headers)
            response = urllib2.urlopen(request)
            
            # Collect the streaming response
            analysis = []
            while True:
                line = response.readline()
                if not line:
                    break
                part = json.loads(line.decode('utf-8'))
                analysis.append(part.get("response", ""))
            
            # Join all parts to form the complete response
            return "".join(analysis)
        except Exception as e:
            return str(e)

